
package GUI;

import LOGIC.Duenio;
import LOGIC.Mascota;
import LOGIC.Validacion;
import SQL.Conexion;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;



/**
 *
 * @author dylan
 */
public class AgregarMascotas extends javax.swing.JInternalFrame {

    public AgregarMascotas() {
        initComponents();
        CargarCombo(cmbID);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtPeso = new javax.swing.JTextField();
        txtEdad = new javax.swing.JTextField();
        txtRaza = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        NombreDuenios = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        observaciones = new javax.swing.JTextArea();
        cmbID = new javax.swing.JComboBox<>();
        AgregarMascota = new javax.swing.JButton();
        cmbColor = new javax.swing.JComboBox<>();
        cmbSexo = new javax.swing.JComboBox<>();
        cmbEspecie = new javax.swing.JComboBox<>();
        btnCalculadora = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setPreferredSize(new java.awt.Dimension(900, 600));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 618, 906, -1));

        jLabel5.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Especie:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 160, -1, -1));

        jLabel7.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Color:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 160, -1, -1));

        jLabel8.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Peso (kg):");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 80, -1, -1));

        jLabel9.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("Edad (meses):");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 80, -1, -1));

        jLabel4.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Nombre:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 80, -1, -1));

        jLabel14.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 0, 0));
        jLabel14.setText("ID Dueño:");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 320, -1, 20));

        jLabel12.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("Raza:");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 260, -1, -1));

        jLabel10.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Observaciones:");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 260, -1, -1));

        jLabel11.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Dueño:");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 260, -1, -1));

        jLabel2.setFont(new java.awt.Font("Liberation Sans", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(242, 82, 100));
        jLabel2.setText("Agregar Mascotas");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, -1, -1));

        txtPeso.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        getContentPane().add(txtPeso, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 110, 200, -1));

        txtEdad.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        getContentPane().add(txtEdad, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 110, 200, -1));

        txtRaza.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        getContentPane().add(txtRaza, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 290, 200, -1));

        txtNombre.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        getContentPane().add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, 200, -1));

        jLabel6.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Sexo:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, -1, -1));

        NombreDuenios.setEditable(false);
        NombreDuenios.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        getContentPane().add(NombreDuenios, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 290, 130, -1));

        observaciones.setColumns(20);
        observaciones.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        observaciones.setRows(5);
        jScrollPane1.setViewportView(observaciones);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 300, -1, 140));

        cmbID.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        cmbID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbIDActionPerformed(evt);
            }
        });
        getContentPane().add(cmbID, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 340, 130, -1));

        AgregarMascota.setBackground(new java.awt.Color(242, 82, 100));
        AgregarMascota.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        AgregarMascota.setForeground(new java.awt.Color(235, 236, 238));
        AgregarMascota.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/informe-medico.png"))); // NOI18N
        AgregarMascota.setText("Nueva Mascota");
        AgregarMascota.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(4, 76, 92)));
        AgregarMascota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarMascotaActionPerformed(evt);
            }
        });
        getContentPane().add(AgregarMascota, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 480, 160, 40));

        cmbColor.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        cmbColor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Negro", "Blanco", "Marron", "Gris", "Rojo", "Naranja", "Amarillo", "Dorado", "Crema", "Beige", "Chocolate", "Tricolor", "Atigrado", "Manchado", "Azul", "Plateado", "Rubio", "Albino", "Calico" }));
        getContentPane().add(cmbColor, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 190, 110, -1));

        cmbSexo.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        cmbSexo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Macho", "Hembra" }));
        getContentPane().add(cmbSexo, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 190, 110, -1));

        cmbEspecie.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        cmbEspecie.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Perro", "Gato", "Conejo", "Pajaro", "Pez", "Reptil", "Roedor", " " }));
        getContentPane().add(cmbEspecie, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 190, 110, -1));

        btnCalculadora.setBackground(new java.awt.Color(157, 166, 225));
        btnCalculadora.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/calcular(1).png"))); // NOI18N
        btnCalculadora.setBorder(null);
        btnCalculadora.setBorderPainted(false);
        btnCalculadora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculadoraActionPerformed(evt);
            }
        });
        getContentPane().add(btnCalculadora, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 100, 50, 40));

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cuidado-de-mascotas.png"))); // NOI18N
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 70));

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 1, 10)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Frame 26.png"))); // NOI18N
        jLabel1.setMaximumSize(new java.awt.Dimension(890, 574));
        jLabel1.setMinimumSize(new java.awt.Dimension(890, 574));
        jLabel1.setPreferredSize(new java.awt.Dimension(890, 574));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 890, 574));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CargarCombo(JComboBox c )
    {
        Conexion conect = new Conexion();
        DefaultComboBoxModel combo = new DefaultComboBoxModel();
        List<Duenio> listDueniosID = conect.obtenerListaIDDuenios();
    for(Duenio duenio : listDueniosID) 
    {
        combo.addElement(duenio.getId_duenio());
    }  
     c.setModel(combo);
     
     c.addActionListener(new ActionListener() 
     {
        public void actionPerformed(ActionEvent e) 
        {
            // Obtener el ID seleccionado
            int idSeleccionado = (int) c.getSelectedItem();
            
            // Obtener el nombre del dueño correspondiente al ID seleccionado
            String nombreDuenio = conect.obtenerNombreDuenioPorID(idSeleccionado);
            
            // Establecer el nombre en el JTextField
            NombreDuenios.setText(nombreDuenio);
        }
    });
        
    }
    private void cmbIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbIDActionPerformed
        
        
    }//GEN-LAST:event_cmbIDActionPerformed

    private void limpiar()
    {
        txtNombre.setText("");
        txtEdad.setText("");
        txtPeso.setText("");
        txtRaza.setText("");
        cmbColor.setSelectedItem("-");
        cmbEspecie.setSelectedItem("-");
        cmbSexo.setSelectedItem("-");
        observaciones.setText("");
    }
    private void AgregarMascotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarMascotaActionPerformed
        Mascota masco = new Mascota();
        Conexion conect = new Conexion();
        Validacion val = new Validacion();
        
        
        if(txtNombre.getText().trim().isEmpty() || txtEdad.getText().trim().isEmpty() ||
                txtPeso.getText().trim().isEmpty() 
                || cmbColor.getSelectedItem().equals("-") || cmbEspecie.getSelectedItem().equals("-") ||
                observaciones.getText().trim().isEmpty() || cmbSexo.getSelectedItem().equals("-"))
        {
            val.mostrarMensaje("Hay campos vacios!", "Error", "Campos vacios");
            return;
        }
        if (txtRaza.getText().trim().isEmpty() && !txtRaza.getText().equals(" "))
        {
            val.mostrarMensaje("NO puede estar vacio", "Error", "Error en la entrada");
        }
        
        if(!val.validarRangoAlfabe(txtNombre.getText()))
        {
            val.mostrarMensaje("El nombre debe contener letras!", "Error", "Nombre invalido");
            return;
        }
        if(txtNombre.getText().length() > 50)
        {
            val.mostrarMensaje("El nombre excede el limite de caracteres esperado!", "Error", "Nombre invalido");
            return;
        }
        
        if (txtNombre.getText().length() < 3) 
         {
            val.mostrarMensaje("El nombre debe tener al menos 3 caracteres.", "Error", "Nombre Inválido");
            return;
         }

        if(!val.validarRangoAlfabe(txtRaza.getText()))
        {
            val.mostrarMensaje("Raza invalida", "Error", "Error");
            return;
        }
        if(txtRaza.getText().length() > 100)
        {
            val.mostrarMensaje("La raza excede el limite de caracteres esperado!", "Error", "Error");
            return;
        }
        if(!val.validarSoloDigitos(txtEdad.getText()))
        {
            val.mostrarMensaje("La edad solo debe llevar digitos!", "Error", "Edad invalida");
            return;
        }
        if(!val.validarNumeroDecimal(txtPeso.getText()))
        {
            val.mostrarMensaje("Error en el ingreso del peso!", "Error", "Peso invalido");
            return;
        } 
         int edad = Integer.parseInt(txtEdad.getText());
         double peso = Double.parseDouble(txtPeso.getText());
         
         if(cmbEspecie.getSelectedItem().equals("Perro") && edad > 240)
         {
            val.mostrarMensaje("La edad del Perro es mayor de lo esperado.", "Error", "Edad invalida");
            return;
         }
         
         if(cmbEspecie.getSelectedItem().equals("Perro") && peso > 82)
         {
            val.mostrarMensaje("El peso del Perro es mayor de lo esperado.", "Error", "Peso Invalido");
            return;
         }
         
         if(cmbEspecie.getSelectedItem().equals("Gato") && edad > 240)
         {
            val.mostrarMensaje("La edad del Gato es mayor de lo esperado.", "Error", "Edad invalida");
            return;
         }
         
          if(cmbEspecie.getSelectedItem().equals("Gato") && peso > 20)
         {
            val.mostrarMensaje("El peso del Gato es mayor de lo esperado.", "Error", "Peso Invalido");
            return;
         }
         
         if(cmbEspecie.getSelectedItem().equals("Pajaro") && edad > 360)
         {
             val.mostrarMensaje("La edad del Pajaro es mayor de lo esperado.", "Error", "Edad invalida");
            return;
         }
         
         if(cmbEspecie.getSelectedItem().equals("Pajaro") && peso > 5)
         {
             val.mostrarMensaje("El peso del Pajaro es mayor de lo esperado.", "Error", "Peso Invalido");
            return;
         }
         
         if(cmbEspecie.getSelectedItem().equals("Pez") && edad > 120)
         {
             val.mostrarMensaje("La edad del Pez es mayor de lo esperado.", "Error", "Edad invalida");
            return;
         }
         
         //
         if(cmbEspecie.getSelectedItem().equals("Conejo") && edad > 144)
         {
             val.mostrarMensaje("La edad del Conejo es mayor de lo esperado.", "Error", "Edad invalida");
            return;
         }
         
         if(cmbEspecie.getSelectedItem().equals("Conejo") && peso > 5)
         {
             val.mostrarMensaje("El peso del Conejo es mayor de lo esperado.", "Error", "Peso Invalido");
            return;
         }     
          if(cmbEspecie.getSelectedItem().equals("Pez") && peso > 5)
         {
             val.mostrarMensaje("El peso del Pez es mayor de lo esperado.", "Error", "Peso Invalido");
            return;
         }
         
         if(cmbEspecie.getSelectedItem().equals("Roedor") && edad > 120)
         {
             val.mostrarMensaje("La edad del Roedor es mayor de lo esperado.", "Error", "Edad invalida");
            return;
         }
         if(cmbEspecie.getSelectedItem().equals("Roedor") && peso > 5)
         {
             val.mostrarMensaje("El peso del Roedor es mayor de lo esperado.", "Error", "Peso Invalido");
            return;
         }
         
         if(cmbEspecie.getSelectedItem().equals("Reptil") && edad > 240)
         {
            val.mostrarMensaje("La edad del Reptil es mayor de lo esperado.", "Error", "Edad invalida");
            return;
         }
         
         if(cmbEspecie.getSelectedItem().equals("Reptil") && peso > 40)
         {
            val.mostrarMensaje("El peso del Reptil es mayor de lo esperado.", "Error", "Peso Invalido");
            return;
         }
         
        String nombre = txtNombre.getText();
        nombre = val.guardaConPrimeraLetraMayuscula(nombre);
        masco.setNombre(nombre);
        masco.setEdad(Integer.parseInt(txtEdad.getText()));
        masco.setPeso(Double.parseDouble(txtPeso.getText()));
        masco.setRaza(txtRaza.getText());
        masco.setColor((String)cmbColor.getSelectedItem());
        masco.setEspecie((String) cmbEspecie.getSelectedItem());
        masco.setSexo((String) cmbSexo.getSelectedItem());
        masco.setObservaciones(observaciones.getText());
        masco.setId_duenio(Integer.parseInt(cmbID.getSelectedItem().toString()));
        conect.insertMascotas(masco);
        val.mostrarMensaje("Se agrego una nueva Mascota!", "Info", "Se añadio una mascota");
          limpiar();
          this.dispose();
    }//GEN-LAST:event_AgregarMascotaActionPerformed

    private void btnCalculadoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculadoraActionPerformed
       Validacion val = new Validacion();
        Convertidora conv = new Convertidora();
        Principal.desktop_menu.add(conv);
        conv.setVisible(true);
        val.centrarInternalFrame(conv, Principal.desktop_menu);
       
    }//GEN-LAST:event_btnCalculadoraActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AgregarMascota;
    private javax.swing.JTextField NombreDuenios;
    private javax.swing.JButton btnCalculadora;
    private javax.swing.JComboBox<String> cmbColor;
    private javax.swing.JComboBox<String> cmbEspecie;
    private javax.swing.JComboBox<String> cmbID;
    private javax.swing.JComboBox<String> cmbSexo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea observaciones;
    private javax.swing.JTextField txtEdad;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPeso;
    private javax.swing.JTextField txtRaza;
    // End of variables declaration//GEN-END:variables

}
